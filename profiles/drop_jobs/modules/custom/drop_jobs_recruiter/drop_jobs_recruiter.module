<?php
/**
 * @file
 * Drop Jobs Recruiter module.
 */
include_once('drop_jobs_recruiter.features.inc');

/**
 * Constants for unique rids generated by Role Export.
 */
define('DROP_JOBS_ROLE_RECRUITER', '100482362');
define('DROP_JOBS_ROLE_RECRUITER_ADMIN', '215224363');

/**
 * Implements hook_permission().
 */
function drop_jobs_recruiter_permission() {
  return array(
    'administer drop_jobs recruiters' => array(
      'title' => t('Administer recruiters'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function drop_jobs_recruiter_menu() {
  $items = array();

  // Admin settings form.
  $items['admin/config/drop-jobs/recruiter'] = array(
    'title' => 'Recruiter',
    'description' => 'Configure Recruiters.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drop_jobs_recruiter_settings'),
    'access arguments' => array('administer drop_jobs recruiters'),
    'file' => 'drop_jobs_recruiter.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Manage recruiters local action.
  $items['admin/drop-jobs/recruiters/settings'] = array(
    'title' => 'Recruiter settings',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/config/drop-jobs/recruiter'),
    'access arguments' => array('administer drop_jobs recruiters'),
    'type' => MENU_LOCAL_ACTION,
  );

  // Recruiter settings local action.
  $items['admin/config/drop-jobs/recruiter/manage'] = array(
    'title' => 'Manage recruiters',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/drop-jobs/recruiters'),
    'access arguments' => array('administer drop_jobs recruiters'),
    'type' => MENU_LOCAL_ACTION,
  );

  // Recruiter dashboard.
  $items['dashboard/recruiter'] = array(
    'title' => 'Recruiter dashboard',
    'description' => 'Drop Jobs Recruiter Dashboard.',
    'page callback' => 'drop_jobs_recruiter_dashboard',
//    'access callback' => TRUE,
    'access callback' => 'drop_jobs_recruiter_dashboard_access',
    'file' => 'drop_jobs_recruiter.pages.inc',
    'menu_name' => 'user-menu',
    'weight' => -50,
  );

  $items['dashboard/recruiter/home'] = array(
    'title' => 'Recruiter Dashboard Home',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -50,
  );

  // "My Recruiter Profile" dashboard page.
  $items['dashboard/recruiter/profile'] = array(
    'title' => 'My recruiter profile',
    'page callback' => 'drop_jobs_recruiter_profile',
    'access callback' => 'drop_jobs_recruiter_dashboard_access',
    'menu_name' => 'menu-drop-jobs-dashboard',
    'file' => 'drop_jobs_recruiter.pages.inc',
    'weight' => -50,
  );

  $items['dashboard/recruiter/profile/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -50,
  );

  $items['dashboard/recruiter/profile/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drop_jobs_recruiter_profile_edit',
    'access callback' => 'drop_jobs_recruiter_dashboard_access',
    'type' => MENU_LOCAL_TASK,
    'file' => 'drop_jobs_recruiter.pages.inc',
  );

  // Recruiter dashboard settings form.
  $items['dashboard/recruiter/preferences'] = array(
    'title' => 'Preferences',
    'description' => 'Drop Jobs recruiter preferences',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drop_jobs_recruiter_preferences'),
    'access callback' => 'drop_jobs_recruiter_dashboard_access',
    'menu_name' => 'menu-drop-jobs-dashboard',
    'file' => 'drop_jobs_recruiter.pages.inc',
    'weight' => 49,
  );

  $items['dashboard/recruiter/preferences/global'] = array(
    'title' => 'Global Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -50,
  );

  return $items;
}

/**
 * Access callback.
 *
 * Checks whether the user is a recruiter and can access the dashboard.
 *
 * @see drop_jobs_recruiter_menu()
 */
function drop_jobs_recruiter_dashboard_access() {
  return drop_jobs_user_has_role(DROP_JOBS_ROLE_RECRUITER) && user_access('access drop_jobs user dashboard');
}

/**
 * Implements hook_init().
 */
function drop_jobs_recruiter_init() {
  // Add admin section styles.
  if (drop_jobs_core_is_admin_page()) {
    drupal_add_css(drupal_get_path('module', 'drop_jobs_recruiter') . '/css/drop_jobs_recruiter_admin.css');
  }
}

/**
 * Implements hook_cron().
 */
function drop_jobs_recruiter_cron() {
  // Update the cache for the total number of active recruiters.
  drop_jobs_recruiter_cache_total();
}

/**
 * Return the total number of active recruiters.
 *
 * @return int
 *   The total number of active recruiters.
 *
 * @see drop_jobs_recruiter_cache_total()
 */
function drop_jobs_recruiter_get_total() {
  static $total;

  if (!isset($total)) {
    $cache = cache_get('drop_jobs_count_recruiters');

    if (isset($cache->data)) {
      $total = $cache->data;
    }
    else {
      $total = drop_jobs_recruiter_cache_total();
    }
  }

  return $total;
}

/**
 * Counts and stores the total number of active recruiters in Drupal's cache
 * and returns the value.
 *
 * @return int
 *   The total number of active recruiters.
 *
 * @see drop_jobs_recruiter_get_total()
 */
function drop_jobs_recruiter_cache_total() {
  $query =
    db_select('users', 'u')
    ->condition('u.uid', 0, '>')
    ->condition('u.status', 1, '=')
    ->condition('ur.rid', DROP_JOBS_ROLE_RECRUITER, '=');

  $query->addExpression('COUNT(*)', 'count');
  $query->addJoin('INNER', 'users_roles', 'ur', 'u.uid = ur.uid');
  $result = $query->execute()->fetchField();

  cache_set('drop_jobs_count_recruiters', $result, 'cache', CACHE_TEMPORARY);
  return $result;
}

/**
 * Implements hook_block_info().
 */
function drop_jobs_recruiter_block_info() {
  return array(
    'recruiter_registration_info' => array(
      'info' => t('Registration information for Recruiters'),
      'cache' => DRUPAL_CACHE_GLOBAL,
      'status' => 0,
      'weight' => 0,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'user/register/recruiter',
      'region' => 'featured',
    ),
    'drop_jobs_recruiter_total' => array(
      'info' => t('Total number of recruiters'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
  );
}

/**
 * Implements hook_block_info_alter().
 */
function drop_jobs_recruiter_block_info_alter(&$blocks, $theme, $code_blocks) {
  // Activate the blocks by default for the bartik theme.
  if ($theme === 'bartik') {
    if (!isset($blocks['drop_jobs_recruiter']['recruiter_registration_info']['bid'])) {
      $blocks['drop_jobs_recruiter']['recruiter_registration_info']['status'] = 1;
      $blocks['drop_jobs_recruiter']['recruiter_registration_info']['region'] = 'featured';
    }
  }
}

/**
 * Implements hook_block_view().
 */
function drop_jobs_recruiter_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'recruiter_registration_info':
      $block['subject'] = t('You are about to sign up as a Recruiter.');
      $block['content'] = array(
        'body' => array(
          '#markup' => t('Sign up as a Candidate instead? Click <a href="!url">here</a>!', array('!url' => url('user/register'))),
        ),
      );
      break;
    case 'drop_jobs_recruiter_total':
      $block['subject'] = t('Recruiters');
      $block['content'] = array(
        'body' => array(
          '#markup' => format_plural(drop_jobs_recruiter_get_total(), '<span>1</span> recruiter registered!', '<span>@count</span> recruiters registered!'),
        ));
      break;
  }

  return $block;
}

/**
 * Implements hook_help().
 */
function drop_jobs_recruiter_help($path, $arg) {
  switch ($path) {
    case 'admin/drop-jobs/recruiters':
      return t("Here you can view and edit all recruiters.");
    case 'admin/config/drop-jobs/recruiter':
      return t('Here you can configure settings for recruiters.');
    case 'dashboard/recruiter':
      return t('This is your recruiter dashboard. Here you can manage and view everything related to your account.');
    case 'dashboard/recruiter/favorites':
      return t('Here you can view all of your favorite candidates.');
  }
}

/**
 * Return all recruiter user IDs.
 *
 * @return array
 *   An array of user IDs.
 *
 * @see drop_jobs_core_get_uids()
 */
function drop_jobs_recruiter_get_uids() {
  return drop_jobs_core_get_uids(DROP_JOBS_ROLE_RECRUITER);
}

/**
 * Return all recruiter profile IDs.
 *
 * @return array
 *   An array of profile IDs.
 */
function drop_jobs_recruiter_get_pids() {
  return drop_jobs_core_get_pids('recruiter');
}

/**
 * Implements hook_drop_jobs_admin_links_alter().
 */
function drop_jobs_recruiter_drop_jobs_admin_links_alter(&$items, $account) {
  if (in_array('recruiter', $account->roles)) {
    $items[] = l(t('View profile'), 'recruiter/' . $account->uid);
    $items[] = l(t('Edit profile'), 'recruiter/' . $account->uid . '/edit');
  }
}

/**
 * Implements hook_custom_theme().
 */
function drop_jobs_recruiter_custom_theme() {
  if (arg(0) === 'recruiter' && is_numeric(arg(1)) && arg(2) === 'edit') {
    return variable_get('admin_theme', 'fubik');
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function drop_jobs_recruiter_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path === 'recruiter/%/edit') {
    if (isset($data['tabs'][0]['output'][0]['#link'])) {
      $path = 'dashboard/recruiter/profile';
      $data['tabs'][0]['output'][0]['#link']['path'] = $path;
      $data['tabs'][0]['output'][0]['#link']['href'] = $path;
      $data['tabs'][0]['output'][0]['#link']['tab_root_href'] = $path;
      $data['tabs'][0]['output'][0]['#link']['tab_parent_href'] = $path;
      $data['tabs'][0]['output'][0]['#link']['page_callback'] = 'drop_jobs_recruiter_profile';
      $data['tabs'][0]['output'][0]['#link']['include_file'] = drupal_get_path('module', 'drop_jobs_recruiter') . '/drop_jobs_recruiter.pages.inc';
    }
  }
}

/**
 * Implements hook_menu_breadcrumb_alter().
 *
 * Fix breadcrumbs for dashboard paths.
 */
function drop_jobs_recruiter_menu_breadcrumb_alter(&$active_trail, $item) {
  $dashboard_paths = array(
    'dashboard/recruiter/profile',
    'dashboard/recruiter/jobs',
    'dashboard/recruiter/favorites',
    'dashboard/recruiter/preferences',
  );

  drupal_alter('drop_jobs_recruiter_dashboard_paths', $dashboard_paths);

  $dashboard_trail = array(
    array(
      'title' => t('Home'),
      'href' => '<front>',
      'localized_options' => array(),
    ),
    array(
      'title' => t('Recruiter dashboard'),
      'href' => 'dashboard/recruiter',
      'localized_options' => array(),
    ),
  );

  if (in_array($item['path'], $dashboard_paths)) {
    $active_trail = $dashboard_trail;
  }
  else if ($item['path'] === 'recruiter/%/edit') {
    $dashboard_trail[] = array(
      'title' => t('My recruiter profile'),
      'href' => 'dashboard/recruiter/page',
      'localized_options' => array(),
    );
    $active_trail = $dashboard_trail;
  }
}
