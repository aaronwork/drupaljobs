<?php
/**
 * @file
 * Drop Jobs Job module.
 */

include_once('drop_jobs_job.features.inc');
include_once('drop_jobs_job.actions.inc');

/**
 * Constants for unique rids generated by Role Export.
 */
define('DROP_JOBS_ROLE_JOB_ADMIN', '139881272');

/**
 * Implements hook_permission().
 */
function drop_jobs_job_permission() {
  return array(
    'administer drop_jobs jobs' => array(
      'title' => t('Administer jobs'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function drop_jobs_job_menu() {
  $items = array();

  // Admin settings forms.
  $items['admin/config/drop-jobs/job'] = array(
    'title' => 'Job',
    'description' => 'Configure Jobs.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drop_jobs_job_settings'),
    'access arguments' => array('administer drop_jobs jobs'),
    'file' => 'drop_jobs_job.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Manage jobs local action.
  $items['admin/drop-jobs/jobs/settings'] = array(
    'title' => 'Job settings',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/config/drop-jobs/job'),
    'access arguments' => array('administer drop_jobs jobs'),
    'type' => MENU_LOCAL_ACTION,
  );

  // Post new job local action.
  $items['dashboard/jobs/new'] = array(
    'title' => 'Post new job',
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/add/job'),
    'access arguments' => array('create job content'),
    'type' => MENU_LOCAL_ACTION,
  );

  // Job settings local action.
  $items['admin/config/drop-jobs/job/manage'] = array(
    'title' => 'Manage jobs',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/drop-jobs/jobs'),
    'access arguments' => array('administer drop_jobs jobs'),
    'type' => MENU_LOCAL_ACTION,
  );

  // Job title autocomplete callback.
  $items['jobs/autocomplete'] = array(
    'page callback' => 'drop_jobs_job_autocomplete',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'drop_jobs_job.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Change "Advanced Job Search" link to a local action.
 */
function drop_jobs_job_menu_alter(&$items) {
  $items['search/job/advanced']['type'] = MENU_LOCAL_ACTION;
//  $items['dashboard/my-jobs']['type'] = MENU_NORMAL_ITEM;
}

/**
 * Implements hook_init().
 */
function drop_jobs_job_init() {
  // Add admin section styles.
  if (drop_jobs_core_is_admin_page()) {
    drupal_add_css(drupal_get_path('module', 'drop_jobs_job') . '/css/drop_jobs_job_admin.css');
  }
}

/**
 * Implements hook_cron().
 */
function drop_jobs_job_cron() {
  // Update the cache for the total number of active jobs.
  drop_jobs_job_cache_total();
}

/**
 * Return the total number of active jobs.
 *
 * @return int
 *   The total number of active jobs.
 *
 * @see drop_jobs_job_cache_total()
 */
function drop_jobs_job_get_total() {
  static $total;

  if (!isset($total)) {
    $cache = cache_get('drop_jobs_count_jobs');

    if (isset($cache->data)) {
      $total = $cache->data;
    }
    else {
      $total = drop_jobs_job_cache_total();
    }
  }

  return $total;
}

/**
 * Counts and stores the total number of active jobs in Drupal's cache
 * and returns the value.
 *
 * @return int
 *   The total number of active jobs.
 *
 * @see drop_jobs_job_get_total()
 */
function drop_jobs_job_cache_total() {
  $query =
    db_select('node', 'n')
    ->condition('n.status', 1, '=')
    ->condition('n.type', 'job', '=');

  $query->addExpression('COUNT(*)', 'count');
  $result = $query->execute()->fetchField();

  cache_set('drop_jobs_count_jobs', $result, 'cache', CACHE_TEMPORARY);
  return $result;
}

/**
 * Implements hook_block_info().
 */
function drop_jobs_job_block_info() {
  return array(
    'job_total' => array(
      'info' => t('Total number of jobs'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function drop_jobs_job_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'job_total':
      $block['subject'] = t('Jobs');
      $block['content'] = array(
        'body' => array(
          '#markup' => format_plural(drop_jobs_job_get_total(), '<span>1</span> job available!', '<span>@count</span> jobs available!'),
        ));
      break;
  }

  return $block;
}

/**
 * Implements hook_help().
 */
function drop_jobs_job_help($path, $arg) {
  switch ($path) {
    case 'dashboard/my-jobs':
      return t('Here you can view, edit and delete your posted jobs.');
    case 'admin/config/drop-jobs/job':
      return t('Here you can configure settings for jobs.');
    case 'admin/drop-jobs/jobs':
      return t('Here you can view, edit and delete all jobs.');
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drop_jobs_job_form_job_node_form_alter(&$form, &$form_state) {
  // @TODO add option to autofill with organization recruiter belongs to.
}

/**
 * Returns how many jobs a given user has created.
 *
 * @param integer
 *   The user's $uid.
 * @return integer
 *   The number of jobs.
 */
function drop_jobs_job_count_by_user($uid) {
  // Use the advanced drupal_static() pattern, since this can be called very
  // often.
  static $drupal_static_fast;

  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['count'] = &drupal_static(__FUNCTION__);
  }
  $count = &$drupal_static_fast['count'];

  if (!isset($count)) {
    $count = array();
  }

  if (!array_key_exists($uid, $count)) {
    $query =
      db_select('node', 'n')
      ->condition('n.type', 'job', '=')
      ->condition('n.uid', $uid, '=');

    $query->addExpression('COUNT(*)');
    $count[$uid] = $query->execute()->fetchField();
  }

  return $count[$uid];
}

/**
 * Returns all published job node ids for a given user.
 *
 * @param integer
 *   The user's $uid.
 * @return array
 *   An simple array of job node ids.
 */
function drop_jobs_job_find_by_user($uid) {
  static $nids = array();

  if (!isset($nids[$uid])) {
    $query =
      db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.status', 1, '=')
      ->condition('n.uid', $uid, '=')
      ->condition('n.type', 'job', '=');

    $result = $query->execute();

    while ($nid = $result->fetchCol()) {
      $nids[$uid] = $nid;
    }
  }

  return $nids[$uid];
}

/**
 * Implements hook_migrate_api().
 */
function drop_jobs_job_migrate_api() {
  return array(
    'api' => 2,
    'migrations' => array(
      'DropJobsTermYearsExperience' => array('class_name' => 'DropJobsTermYearsExperience'),
    ),
  );
}

/**
 * Helper function to change a job's workflow state.
 *
 * We perform no validation as this isn't supposed to be called directly.
 * Use the following api functions instead: drop_jobs_job_set_visible(),
 * drop_jobs_job_set_hidden() and drop_jobs_job_set_auto_hidden().
 *
 * @param integer
 *   The job's node object.
 * @param string
 *   The workflow state.
 */
function _drop_jobs_job_set_workflow($node, $state) {
  if (is_object($node) && $node->type === 'job') {
    if ($wrapper = entity_metadata_wrapper('node', $node)) {
      $wrapper->field_job_workflow = $state;
      $wrapper->save();
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Set a job's workflow state to "Visible".
 *
 * @param stdClass
 *   The job's node object.
 *
 * @see _drop_jobs_job_set_workflow()
 */
function drop_jobs_job_set_visible($node) {
  return _drop_jobs_job_set_workflow($node, DROP_JOBS_WORKFLOW_VISIBLE);
}

/**
 * Set a job's workflow state to "Hidden".
 *
 * @param stdClass
 *   The job's node object.
 *
 * @see _drop_jobs_job_set_workflow()
 */
function drop_jobs_job_set_hidden($node) {
  return _drop_jobs_job_set_workflow($node, DROP_JOBS_WORKFLOW_HIDDEN);
}

/**
 * Set a job's workflow state to "Automatically Hidden".
 *
 * @param stdClass
 *   The job's node object.
 *
 * @see _drop_jobs_job_set_workflow()
 */
function drop_jobs_job_set_auto_hidden($node) {
  return _drop_jobs_job_set_workflow($node, DROP_JOBS_WORKFLOW_AUTO_HIDDEN);
}

/**
 * Helper function to check a job's workflow state.
 *
 * We perform no validation as this isn't supposed to be called directly.
 * Use the following api functions instead: drop_jobs_job_is_visible(),
 * drop_jobs_job_is_hidden() and drop_jobs_job_is_auto_hidden().
 *
 * @param stdClass
 *   The job's $node id.
 * @param string
 *   The workflow state.
 */
function _drop_jobs_job_is_workflow($node, $state) {
  if (is_object($node) && $node->type === 'job') {
    if ($wrapper = entity_metadata_wrapper('node', $node)) {
      return $wrapper->field_job_workflow->value() === $state;
    }
  }

  return FALSE;
}

/**
 * Return whether a job is visible.
 *
 * @param stdClass
 *   The job's $node id.
 * @return boolean
 *   Whether the résumé is visible or not.
 */
function drop_jobs_job_is_visible($node) {
  return _drop_jobs_job_is_workflow($node, DROP_JOBS_WORKFLOW_VISIBLE);
}

/**
 * Return whether a job is hidden.
 *
 * @param stdClass
 *   The job's $node id.
 * @return boolean
 *   Whether the résumé is hidden or not.
 */
function drop_jobs_job_is_hidden($node) {
  return _drop_jobs_job_is_workflow($node, DROP_JOBS_WORKFLOW_HIDDEN);
}

/**
 * Return whether a job is automatically hidden.
 *
 * @param stdClass
 *   The job's $node id.
 * @return boolean
 *   Whether the résumé is automatically hidden or not.
 */
function drop_jobs_job_is_auto_hidden($node) {
  return _drop_jobs_job_is_workflow($node, DROP_JOBS_WORKFLOW_AUTOHIDDEN);
}
