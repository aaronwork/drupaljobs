<?php
/**
 * @file
 * Drop Jobs Core module.
 */
include_once('drop_jobs_core.features.inc');

/**
 * Constants for unique rids generated by Role Export.
 */
define('DROP_JOBS_ROLE_ADMIN', '30037204');
define('DROP_JOBS_ROLE_CONTENT_ADMIN', '29617163');

/**
 * Constants for job and resume workflow states.
 */
define('DROP_JOBS_WORKFLOW_VISIBLE', 'visible');
define('DROP_JOBS_WORKFLOW_HIDDEN', 'hidden');
define('DROP_JOBS_WORKFLOW_AUTO_HIDDEN', 'auto_hidden');

/**
 * Implements hook_permission().
 */
function drop_jobs_core_permission() {
  return array(
    'administer drop_jobs' => array(
      'title' => t('Administer Drop Jobs'),
    ),
    'access drop_jobs user dashboard' => array(
      'title' => t('Access Drop Jobs user dashboard'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function drop_jobs_core_menu() {
  $items = array();

  // Only display Welcome page if enabled.
  if (variable_get_value('drop_jobs_welcome_page')) {
    $items['welcome-to-drop-jobs'] = array(
      'title' => 'Welcome to Drop Jobs!',
      'page callback' => 'drop_jobs_welcome_page',
      'access arguments' => array('access content'),
      'menu_name' => 'main-menu',
      'weight' => -50,
      'file' => 'drop_jobs_core.pages.inc',
    );
  }

  // Shortcut to enable demo content module.
  $items['admin/config/drop-jobs/demo/import'] = array(
    'title' => 'Install Drop Jobs demonstration content',
    'page callback' => 'drop_jobs_core_demo_import',
    'access arguments' => array('administer drop_jobs'),
    'file' => 'drop_jobs_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  // Shortcut to disable demo content.
  $items['admin/config/drop-jobs/demo/rollback'] = array(
    'title' => 'Remove Drop Jobs demonstration content',
    'page callback' => 'drop_jobs_core_demo_rollback',
    'access arguments' => array('administer drop_jobs'),
    'file' => 'drop_jobs_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  // Shortcut to disable demo content module.
  $items['admin/config/drop-jobs/demo/disable'] = array(
    'title' => 'Disable Drop Jobs demo',
    'page callback' => 'drop_jobs_core_demo_disable',
    'access arguments' => array('administer drop_jobs'),
    'file' => 'drop_jobs_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  // Admininstration Dashboard page.
  $items['admin/drop-jobs'] = array(
    'title' => 'Drop Jobs',
    'description' => 'Drop Jobs Administration Dashboard.',
    'page callback' => 'drop_jobs_admin_dashboard',
    'access arguments' => array('administer drop_jobs'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'drop_jobs_core.pages.inc',
  );

  $items['admin/drop-jobs/home'] = array(
    'title' => 'Admin Home',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -50,
  );

  // General settings form.
  $items['admin/config/drop-jobs'] = array(
    'title' => 'Drop Jobs',
    'description' => 'Drop Jobs Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drop_jobs_core_settings'),
    'access arguments' => array('administer drop_jobs'),
    'file' => 'drop_jobs_core.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/drop-jobs/global'] = array(
    'title' => 'Global Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -50,
  );

  // Alias for settings form, creates a local task.
  $items['admin/drop-jobs/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/config/drop-jobs'),
    'access arguments' => array('administer drop_jobs'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function drop_jobs_core_menu_alter(&$items) {
  // Profile base paths are hard-coded.
  // Make them menu callbacks so we can control the "My Profile" pages
  // ourselves.
  $items['resume']['type'] = MENU_CALLBACK;
  $items['recruiter']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_admin_paths().
 */
function drop_jobs_core_admin_paths() {
  return array(
    'dashboard*' => TRUE,
    'help*' => TRUE,
    'user*' => TRUE,
  );
}

/**
 * Implements hook_admin_paths_alter().
 *
 * A trick to enforce page refresh when theme is changed from an overlay.
 */
function drop_jobs_core_admin_paths_alter(&$paths) {
  $paths['admin/appearance/default*'] = FALSE;
}

/**
 * Find out of a given Drop Jobs "Feature" is required by another enabled
 * feature.
 *
 * @param string
 *   The feature $name
 * @return boolean
 *   Whether the feature is required by another enabled feature.
 */
function drop_jobs_core_feature_required($name) {
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;

  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['features'] = &drupal_static(__FUNCTION__);
  }

  $features = &$drupal_static_fast['features'];

  if (!isset($features)) {
    $features = drop_jobs_get_features();
  }

  foreach ($features as $feature) {
    if ($feature->status == 1 && in_array($name, $feature->info['dependencies'])) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add teaser view modes to field collection item and profile2 entities.
 */
function drop_jobs_core_entity_info_alter(&$entity_info) {
  $entity_info['field_collection_item']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => FALSE,
  );

  $entity_info['profile2']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_init().
 */
function drop_jobs_core_init() {
  // Add admin section styles.
  if (drop_jobs_core_is_admin_page()) {
    // Add external javascript includes using Libraries API.
    libraries_load('jquery.scrollto');

    // Add Drop Jobs Admin script & style.
    drupal_add_js(drupal_get_path('module', 'drop_jobs_core') . '/js/drop_jobs_admin.js');
    drupal_add_css(drupal_get_path('module', 'drop_jobs_core') . '/css/drop_jobs_admin.css');
  }
}

/**
 * Implements hook_help().
 */
function drop_jobs_core_help($path, $arg) {
  switch ($path) {
    case 'admin/drop-jobs':
      return t('This is the Drop Jobs Administration Panel. Here you can manage and view all aspects of your job search website.');
    case 'user/*':
      return t('Here you can view and edit your account information.');
    case 'admin/config/drop-jobs':
      return t('Here you can configure Drop Jobs to best suit your website. Settings for each individual module can be found in the tabs along the top of the page.');
    case 'admin/config/drop-jobs/admin':
      return t('Here you can configure the Drop Jobs administration dashboard.');
    case 'admin/config/drop-jobs/dashboard':
      return t('Here you can configure the Drop Jobs user dashboard.');
    case 'admin/drop-jobs/pages':
      return t('Here you can view, edit and delete all pages.');
  }
}

/**
 * Implements hook_preprocess().
 *
 * Adds an extra class to Drop Jobs Admin menu items.
 */
function drop_jobs_core_preprocess_menu_link(&$variables) {
  $menus = array(
    'menu_link__menu_drop_jobs_admin',
    'menu_link__menu_drop_jobs_dashboard',
  );

  if (isset($variables['element']['#theme']) && in_array($variables['element']['#theme'], $menus)) {
    $href = explode('/', $variables['element']['#href']);

    // @TODO figure out a way of removing all this hard-coded stuff.
    // Settings is an exception.
    if ($variables['element']['#href'] === 'admin/config/drop-jobs') {
      $classname = 'settings';
    }
    // Reports is an exception.
    else if ($variables['element']['#href'] === 'admin/reports/drop-jobs') {
      $classname = 'reports';
    }
    // Candidate resume is an exception.
    else if ($variables['element']['#href'] === 'dashboard/candidate/resume') {
      $classname = 'resume';
    }
    // Recruiter profile is an exception.
    else if ($variables['element']['#href'] === 'dashboard/recruiter/profile') {
      $classname = 'recruiter';
    }
    // Organization page is an exception.
    else if ($variables['element']['#href'] === 'dashboard/organization/page') {
      $classname = 'organization';
    }
    // Recruiter dashboard home is an exception.
    else if ($variables['element']['#href'] === 'dashboard/recruiter') {
      $classname = 'home';
    }
    // Candidate dashboard home is an exception.
    else if ($variables['element']['#href'] === 'dashboard/candidate') {
      $classname = 'home';
    }
    // Organization dashboard home is an exception.
    else if ($variables['element']['#href'] === 'dashboard/organization') {
      $classname = 'home';
    }
    else {
      $classname = array_pop($href);
    }

    $variables['element']['#attributes']['class'][] = $classname;
  }
}

/**
 * Implements hook_variable_info().
 */
function drop_jobs_core_variable_info() {
  $variables = array();

  $variables['drop_jobs_welcome_page'] = array(
    'title' => t('Display Welcome Page'),
    'default' => TRUE,
    'type' => 'boolean',
    'group' => 'drop_jobs_core',
    'token' => FALSE,
  );

  $variables['drop_jobs_log'] = array(
    'title' => t('Drop Jobs Development mode'),
    'default' => FALSE,
    'type' => 'boolean',
    'group' => 'drop_jobs_core',
    'token' => FALSE,
  );

  $variables['drop_jobs_dashboard_admin_cols'] = array(
    'title' => t('Admin Dashboard items per row'),
    'default' => 4,
    'type' => 'number',
    'group' => 'drop_jobs_core',
    'token' => FALSE,
  );

  $variables['drop_jobs_dashboard_user_cols'] = array(
    'title' => t('User Dashboard items per row'),
    'default' => 4,
    'type' => 'number',
    'group' => 'drop_jobs_core',
    'token' => FALSE,
  );

  return $variables;
}

/**
 * Return all user IDs from a specific role.
 *
 * @param int
 *   The role id.
 * @return array
 *   An array of user IDs.
 */
function drop_jobs_core_get_uids($role) {
  $uids = &drupal_static(__FUNCTION__, array());

  if (!isset($uids[$role])) {
    $uids[$role] = array();

    $query =
      db_select('users', 'u')
      ->condition('u.status', 1, '=')
      ->condition('ur.role', $role, '=')
      ->fields('u', array('uid'));

    $query->join('users_roles', 'ur', 'u.uid = ur.uid');
    $results = $query->execute();

    foreach ($results as $user) {
      $uids[$role][] = $user->uid;
    }
  }

  return $uids;
}

/**
 * Return all profile IDs from a specific profile type.
 *
 * @param string
 *   The profile type.
 * @return array
 *   An array of profile IDs.
 */
function drop_jobs_core_get_pids($type) {
  static $pids;

  if (!isset($pids[$type])) {
    $pids[$type] = array();

    $query =
      db_select('profile', 'p')
      ->fields('p', array('pid'))
      ->condition('p.type', $type, '=')
      ->condition('u.status', 1, '=');

    $query->addJoin('INNER', 'users', 'u', 'p.uid = u.uid');
    $results = $query->execute();

    foreach ($results as $profile) {
      $pids[$type][] = $profile->pid;
    }
  }

  return $pids[$type];
}

/**
 * Returns whether either the admin or one of the dashboard contexts is active.
 * contexts are available.
 */
function drop_jobs_core_is_admin_page() {
  static $result;
  static $contexts;

  if (!isset($result)) {
    if (!isset($contexts)) {
      $contexts = array_keys(context_active_contexts());
    }

    $target_contexts = array(
      'drop_jobs_admin',
      'drop_jobs_dashboard_candidate',
      'drop_jobs_dashboard_recruiter',
      'drop_jobs_dashboard_organization',
    );

    $intersection = array_intersect($target_contexts, $contexts);
    $result = !empty($intersection);
  }

  return $result;
}

/**
 * Implements hook_preprocess().
 */
function drop_jobs_core_preprocess_entity(&$variables) {
  // Remove empty field collections for users without edit permission.
  if ($variables['entity_type'] === 'profile2' && !profile2_access('edit', $variables['profile2'])) {
    foreach ($variables['content'] as &$item) {
      if (isset($item['#field_type']) && $item['#field_type'] == 'field_collection') {
        if (empty($item['#items'])) {
          $item['#access'] = FALSE;
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drop_jobs_core_form_field_collection_item_form_alter(&$form, &$form_state, $form_id) {
  // Add help text for description items.
  if (isset($form_state['field_collection_item'])) {
    $entity = $form_state['field_collection_item'];
    $instance = field_info_instance($entity->hostEntityType(), $form['field_name']['#value'], $entity->hostEntityBundle());
    if (!empty($instance['description'])) {
      $form['help'] = array(
        '#weight' => -999,
        '#markup' => '<div class="description field-collection-item-form-description">' . filter_xss_admin($instance['description']) . '</div>',
      );
    }
  }
}

/**
 * Implements hook_migrate_api().
 */
function drop_jobs_core_migrate_api() {
  return array(
    'api' => 2,
    'migrations' => array(
      'DropJobsTermDegreeLevel' => array('class_name' => 'DropJobsTermDegreeLevel'),
      'DropJobsTermEmploymentType' => array('class_name' => 'DropJobsTermEmploymentType'),
      'DropJobsTermFieldsStudy' => array('class_name' => 'DropJobsTermFieldsStudy'),
      'DropJobsTermLanguages' => array('class_name' => 'DropJobsTermLanguages'),
      'DropJobsTermOccupationalFields' => array('class_name' => 'DropJobsTermOccupationalFields'),
      'DropJobsTermSkills' => array('class_name' => 'DropJobsTermSkills'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function drop_jobs_core_libraries_info() {
  $libraries = array();

  $libraries['jquery.scrollto'] = array(
    'name' => 'jQuery ScrollTo',
    'vendor url' => 'http://demos.flesler.com/jquery/scrollTo/',
    'download url' => 'https://github.com/flesler/jquery.scrollTo/archive/1.4.4.tar.gz',
    'library path' => drupal_get_path('profile', 'drop_jobs') . '/libraries/jquery.scrollto',
    'version arguments' => array(
      'file' => 'jquery.scrollTo-1.4.2-min.js',
      'pattern' => '/@version\s+([0-9a-zA-Z\.-]+)/',
      'lines' => 8,
    ),
    'files' => array(
      'js' => array(
        'jquery.scrollTo-1.4.2-min.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_user_view().
 */
function drop_jobs_core_user_view($account, $view_mode, $langcode) {
  // Add some useful administration links.
  if ($view_mode === "full" && user_access('administer users')) {
    $items = array();
    // By default we do not have any links, but allow modules to add items.
    drupal_alter('drop_jobs_admin_links', $items, $account);

    if (count($items)) {
      $account->content['summary']['admin_links'] =  array(
        '#title' => t('Admin links'),
        '#theme' => 'item_list',
        '#items' => $items,
        '#weight' => 10,
      );
    }
  }
}

/**
 * Helper function.
 * Converts a Drupal menu into a table layout for creating Dashboards.
 *
 * @param string
 *   The $menu_name.
 * @param int
 *   The number of columns per row.
 * @param string
 *   The text to display if there are no items in the menu.
 * @param array
 *   An array of custom classes to apply, keyed by path. Use this to override
 *   the default classes set.
 * @param array
 *   An array of paths to exclude from the table.
 * @param boolean
 *   Whether or not to hide local tasks and actions, defaults to FALSE.
 *
 * @return string
 *   The rendered markup of the table.
 */
function drop_jobs_core_menu_table($menu_name, $cols_per_row = 4, $empty_text = NULL, $classes = array(), $exclude = array(), $hide_local = FALSE) {
  $menu = menu_load_links($menu_name);
  $rows = array();
  $cols = array();
  $col = 0;

  // Generate table markup.
  foreach ($menu as $link) {
    $item = menu_get_item($link['link_path']);

    // Check for permission.
    if($item['access']) {
      if ($hide_local) {
        $skip = array(
          MENU_LOCAL_TASK,
          MENU_LOCAL_ACTION,
          MENU_DEFAULT_LOCAL_TASK,
        );

        if (in_array($item['type'], $skip)) {
          continue;
        }
      }

      if (array_key_exists($link['link_path'], $classes)) {
        $slug = $classes[$link['link_path']];
      }
      else if (in_array($link['link_path'], $exclude)) {
        continue;
      }
      else {
        $path = explode('/', $link['link_path']);
        $slug = array_pop($path);
      }

      $cols[] = array(
        'class' => array($slug),
        'data' => '<div class="link-wrapper">' . l(
          str_replace('Manage ', '', $link['link_title']), url($link['link_path'], array('absolute' => TRUE)), array('html' => TRUE, 'attributes' => array('class' => 'drop_jobs_admin_link'))
        ) . '</div>',
      );

      // X columns per row.
      if (++$col == $cols_per_row) {
        $rows[] = array(
          'no_striping' => TRUE,
          'data' => $cols,
        );
        $col = 0;
        $cols = array();
      }
    }
  }

  // Pad to desired number of columns.
  if (!empty($cols)) {
    $cols = array_pad($cols, $cols_per_row, array('class' => 'drop_jobs_admin_filler', 'data' => array()));

    $rows[] = array(
      'no_striping' => TRUE,
      'data' => $cols,
    );
  }

  if (!empty($rows)) {
    return theme('table', array(
      'rows' => $rows,
      'attributes' => array('class' => array('drop_jobs_dashboard')),
      'sticky' => FALSE,
    ));
  }
  else {
    if (!isset($empty_text)) {
      $empty_text = t('There are no items to display!');
    }

    return array(
      '#markup' => $empty_text,
      '#prefix' => '<div class="messages warning">',
      '#suffix' => '</div>',
    );
  }
}
