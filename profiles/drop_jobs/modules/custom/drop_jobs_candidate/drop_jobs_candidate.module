<?php
/**
 * @file
 * Drop Jobs Candidate module.
 */
include_once('drop_jobs_candidate.features.inc');
include_once('drop_jobs_candidate.actions.inc');

/**
 * Constants for unique rids generated by Role Export.
 */
define('DROP_JOBS_ROLE_CANDIDATE', '185431326');
define('DROP_JOBS_ROLE_CANDIDATE_ADMIN', '99206295');

/**
 * Implements hook_permission().
 */
function drop_jobs_candidate_permission() {
  return array(
    'administer drop_jobs candidates' => array(
      'title' => t('Administer candidates'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function drop_jobs_candidate_menu() {
  $items = array();

  // Admin settings form.
  $items['admin/config/drop-jobs/candidate'] = array(
    'title' => 'Candidate',
    'description' => 'Configure Candidates.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drop_jobs_candidate_settings'),
    'access arguments' => array('administer drop_jobs candidates'),
    'file' => 'drop_jobs_candidate.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Manage candidates local action.
  $items['admin/drop-jobs/candidates/settings'] = array(
    'title' => 'Candidate settings',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/config/drop-jobs/candidate'),
    'access arguments' => array('administer drop_jobs candidates'),
    'type' => MENU_LOCAL_ACTION,
  );

  // Candidate settings local action.
  $items['admin/config/drop-jobs/candidate/manage'] = array(
    'title' => 'Manage candidates',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/drop-jobs/candidates'),
    'access arguments' => array('administer drop_jobs candidates'),
    'type' => MENU_LOCAL_ACTION,
  );

  // Candidate dashboard.
  $items['dashboard/candidate'] = array(
    'title' => 'Candidate dashboard',
    'description' => 'Drop Jobs Candidate Dashboard.',
    'page callback' => 'drop_jobs_candidate_dashboard',
//    'access callback' => TRUE,
    'access callback' => 'drop_jobs_candidate_dashboard_access',
    'file' => 'drop_jobs_candidate.pages.inc',
    'menu_name' => 'user-menu',
    'weight' => -50,
  );

  $items['dashboard/candidate/home'] = array(
    'title' => 'Candidate Dashboard Home',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -50,
  );

  // "My Resume" dashboard page.
  $items['dashboard/candidate/resume'] = array(
    'title' => 'My résumé',
    'page callback' => 'drop_jobs_candidate_profile',
    'access callback' => 'drop_jobs_candidate_dashboard_access',
    'menu_name' => 'menu-drop-jobs-dashboard',
    'file' => 'drop_jobs_candidate.pages.inc',
    'weight' => -50,
  );

  $items['dashboard/candidate/resume/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -50,
  );

  $items['dashboard/candidate/resume/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drop_jobs_candidate_profile_edit',
    'access callback' => 'drop_jobs_candidate_dashboard_access',
    'type' => MENU_LOCAL_TASK,
    'file' => 'drop_jobs_candidate.pages.inc',
  );

  // Candidate dashboard settings form.
  $items['dashboard/candidate/preferences'] = array(
    'title' => 'Preferences',
    'description' => 'Drop Jobs candidate preferences',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drop_jobs_candidate_preferences'),
    'access callback' => 'drop_jobs_candidate_dashboard_access',
    'menu_name' => 'menu-drop-jobs-dashboard',
    'file' => 'drop_jobs_candidate.pages.inc',
    'weight' => 49,
  );

  $items['dashboard/candidate/preferences/global'] = array(
    'title' => 'Global Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -50,
  );

  return $items;
}

/**
 * Access callback.
 *
 * Checks whether the user is a candidate and can access the dashboard.
 *
 * @see drop_jobs_candidate_menu()
 */
function drop_jobs_candidate_dashboard_access() {
  return drop_jobs_user_has_role(DROP_JOBS_ROLE_CANDIDATE) && user_access('access drop_jobs user dashboard');
}

/**
 * Implements hook_menu_alter().
 *
 * Change "Advanced Résumé Search" link to a local action.
 */
function drop_jobs_candidate_menu_alter(&$items) {
  $items['search/resume/advanced']['type'] = MENU_LOCAL_ACTION;
}

/**
 * Implements hook_init().
 */
function drop_jobs_candidate_init() {
  // Add admin section styles.
  if (drop_jobs_core_is_admin_page()) {
    drupal_add_css(drupal_get_path('module', 'drop_jobs_candidate') . '/css/drop_jobs_candidate_admin.css');
  }
}

/**
 * Implements hook_cron().
 */
function drop_jobs_candidate_cron() {
  // Update the cache for the total number of active candidates.
  drop_jobs_candidate_cache_total();

  // @TODO check for and hide incomplete resumes (if variable set)?
}

/**
 * Return the total number of active candidates.
 *
 * @return int
 *   The total number of active candidates.
 *
 * @see drop_jobs_candidate_cache_total()
 */
function drop_jobs_candidate_get_total() {
  static $total;

  if (!isset($total)) {
    $cache = cache_get('drop_jobs_count_candidates');

    if (isset($cache->data)) {
      $total = $cache->data;
    }
    else {
      $total = drop_jobs_candidate_cache_total();
    }
  }

  return $total;
}

/**
 * Counts and stores the total number of active candidates in Drupal's cache
 * and returns the value.
 *
 * @return int
 *   The total number of active candidates.
 *
 * @see drop_jobs_candidate_get_total()
 */
function drop_jobs_candidate_cache_total() {
  $query =
    db_select('profile', 'p')
    ->condition('u.uid', 0, '>')
    ->condition('u.status', 1, '=')
    ->condition('p.type', 'resume', '=')
    ->condition('ur.rid', DROP_JOBS_ROLE_CANDIDATE, '=')
    ->condition('fdfrw.field_resume_workflow_value', DROP_JOBS_WORKFLOW_VISIBLE, '=');

  $query->addExpression('COUNT(*)', 'count');
  $query->addJoin('INNER', 'users', 'u', 'u.uid = p.uid');
  $query->addJoin('INNER', 'users_roles', 'ur', 'u.uid = ur.uid');
  $query->addJoin('INNER', 'field_data_field_resume_workflow', 'fdfrw', 'fdfrw.entity_id = p.pid');
  $result = $query->execute()->fetchField();

  cache_set('drop_jobs_count_candidates', $result, 'cache', CACHE_TEMPORARY);
  return $result;
}

/**
 * Implements hook_block_info().
 */
function drop_jobs_candidate_block_info() {
  return array(
    'candidate_registration_info' => array(
      'info' => t('Registration information for Candidates'),
      'cache' => DRUPAL_CACHE_GLOBAL,
      'status' => 0,
      'weight' => 0,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'user/register',
      'region' => 'featured',
    ),
    'candidate_total' => array(
      'info' => t('Total number of résumés'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
  );
}

/**
 * Implements hook_block_info_alter().
 */
function drop_jobs_candidate_block_info_alter(&$blocks, $theme, $code_blocks) {
  // Activate the blocks by default for the bartik theme.
  if ($theme === 'bartik') {
    if (!isset($blocks['drop_jobs_candidate']['candidate_registration_info']['bid'])) {
      $blocks['drop_jobs_candidate']['candidate_registration_info']['status'] = 1;
      $blocks['drop_jobs_candidate']['candidate_registration_info']['region'] = 'featured';
    }
  }
}

/**
 * Implements hook_block_view().
 */
function drop_jobs_candidate_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'candidate_registration_info':
      $block['subject'] = t('You are about to sign up as a Candidate.');
      $block['content'] = array(
        'body' => array(
          '#markup' => t('Sign up as a Recruiter instead? Click <a href="!url">here</a>!', array('!url' => url('user/register/recruiter'))),
        ),
      );
      break;
    case 'candidate_total':
      $block['subject'] = t('Résumés');
      $block['content'] = array(
        'body' => array(
          '#markup' => format_plural(drop_jobs_candidate_get_total(), '<span>1</span> résumé available!', '<span>@count</span> résumés available!'),
        ));
      break;
  }

  return $block;
}

/**
 * Return all candidate user IDs.
 *
 * @return array
 *   An array of user IDs.
 *
 * @see drop_jobs_core_get_uids()
 */
function drop_jobs_candidate_get_uids() {
  return drop_jobs_core_get_uids(DROP_JOBS_ROLE_CANDIDATE);
}

/**
 * Return all candidate resume IDs.
 *
 * @return array
 *   An array of profile IDs.
 */
function drop_jobs_candidate_get_pids() {
  return drop_jobs_core_get_pids('resume');
}

/**
 * Implements hook_variable_info().
 */
function drop_jobs_candidate_variable_info() {
  $variables = array();

  $variables['drop_jobs_candidate_hide_incomplete'] = array(
    'title' => t('Hide incomplete résumés'),
    'default' => FALSE,
    'type' => 'boolean',
    'group' => 'drop_jobs_candidate',
    'token' => FALSE,
  );

  return $variables;
}

/**
 * Helper function to check a résumé's workflow state.
 *
 * We perform no validation as this isn't supposed to be called directly.
 * Use the following api functions instead: drop_jobs_candidate_is_visible(),
 * drop_jobs_candidate_is_hidden() and drop_jobs_candidate_is_auto_hidden().
 *
 * @param Profile
 *   The $profile object.
 * @param string
 *   The workflow state.
 */
function _drop_jobs_candidate_is_workflow(Profile $profile, $state) {
  if ($profile->type === 'resume') {
    if ($wrapper = entity_metadata_wrapper('profile2', $profile)) {
      return $wrapper->field_resume_workflow->value() === $state;
    }
  }

  return FALSE;
}

/**
 * Return whether a candidate's résumé is visible.
 *
 * @param Profile
 *   The $profile object.
 * @return boolean
 *   Whether the résumé is visible or not.
 */
function drop_jobs_candidate_is_visible(Profile $profile) {
  return _drop_jobs_candidate_is_workflow($profile, DROP_JOBS_WORKFLOW_VISIBLE);
}

/**
 * Return whether a candidate's résumé is hidden.
 *
 * @param Profile
 *   The $profile object.
 * @return boolean
 *   Whether the résumé is hidden or not.
 */
function drop_jobs_candidate_is_hidden(Profile $profile) {
  return _drop_jobs_candidate_is_workflow($profile, DROP_JOBS_WORKFLOW_HIDDEN);
}

/**
 * Return whether a candidate's résumé is automatically hidden.
 *
 * @param Profile
 *   The $profile object.
 * @return boolean
 *   Whether the résumé is automatically hidden or not.
 */
function drop_jobs_candidate_is_auto_hidden(Profile $profile) {
  return _drop_jobs_candidate_is_workflow($profile, DROP_JOBS_WORKFLOW_AUTOHIDDEN);
}

/**
 * Helper function to change a résumé's workflow state.
 *
 * We perform no validation as this isn't supposed to be called directly.
 * Use the following api functions instead: drop_jobs_candidate_set_visible(),
 * drop_jobs_candidate_set_hidden() and drop_jobs_candidate_set_auto_hidden().
 *
 * @param Profile
 *   The $profile object.
 * @param string
 *   The workflow state.
 */
function _drop_jobs_candidate_set_workflow(Profile $profile, $state) {
  if ($profile->type === 'resume') {
    if ($wrapper = entity_metadata_wrapper('profile2', $profile)) {
      $wrapper->field_resume_workflow = $state;
      $wrapper->save();
      $event = 'drop_jobs_resume_' . $state;
      rules_invoke_event($event, $profile);
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Set a résumé's workflow state to "Visible".
 *
 * @param Profile
 *   The $profile object.
 *
 * @see _drop_jobs_candidate_set_workflow()
 */
function drop_jobs_candidate_set_visible(Profile $profile) {
  return _drop_jobs_candidate_set_workflow($profile, DROP_JOBS_WORKFLOW_VISIBLE);
}

/**
 * Set a résumé's workflow state to "Hidden".
 *
 * @param Profile
 *   The $profile object.
 *
 * @see _drop_jobs_candidate_set_workflow()
 */
function drop_jobs_candidate_set_hidden(Profile $profile) {
  return _drop_jobs_candidate_set_workflow($profile, DROP_JOBS_WORKFLOW_HIDDEN);
}

/**
 * Set a résumé's workflow state to "Automatically Hidden".
 *
 * @param Profile
 *   The $profile object.
 *
 * @see _drop_jobs_candidate_set_workflow()
 */
function drop_jobs_candidate_set_auto_hidden(Profile $profile) {
  return _drop_jobs_candidate_set_workflow($profile, DROP_JOBS_WORKFLOW_AUTO_HIDDEN);
}

/**
 * Implements hook_help().
 */
function drop_jobs_candidate_help($path, $arg) {
  switch ($path) {
    case 'admin/drop-jobs/candidates':
      return t('Here you can view and edit all candidates.');
    case 'admin/config/drop-jobs/candidate':
      return t('Here you can configure settings for candidates.');
    case 'dashboard/candidate':
      return t('This is your candidate dashboard. Here you can manage and view everything related to your account.');
  }
}

/**
 * Implements hook_drop_jobs_admin_links_alter().
 */
function drop_jobs_candidate_drop_jobs_admin_links_alter(&$items, $account) {
  if (in_array('candidate', $account->roles)) {
    $profile = profile2_load_by_user($account, 'resume');
    $state_field = field_view_field('profile2', $profile, 'field_resume_workflow');
    $items[] = l(t('View resume'), 'resume/' . $account->uid) . ' (' . strip_tags(drupal_render($state_field)) .')';
    $items[] = l(t('Edit resume'), 'resume/' . $account->uid . '/edit');
  }
}

/**
 * Implements hook_custom_theme().
 */
function drop_jobs_candidate_custom_theme() {
  if (arg(0) === 'resume' && is_numeric(arg(1)) && arg(2) === 'edit') {
    return variable_get('admin_theme', 'fubik');
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function drop_jobs_candidate_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path === 'resume/%/edit') {
    if (isset($data['tabs'][0]['output'][0]['#link'])) {
      $path = 'dashboard/candidate/resume';
      $data['tabs'][0]['output'][0]['#link']['path'] = $path;
      $data['tabs'][0]['output'][0]['#link']['href'] = $path;
      $data['tabs'][0]['output'][0]['#link']['tab_root_href'] = $path;
      $data['tabs'][0]['output'][0]['#link']['tab_parent_href'] = $path;
      $data['tabs'][0]['output'][0]['#link']['page_callback'] = 'drop_jobs_candidate_profile';
      $data['tabs'][0]['output'][0]['#link']['include_file'] = drupal_get_path('module', 'drop_jobs_candidate') . '/drop_jobs_candidate.pages.inc';
    }
  }
}

/**
 * Implements hook_menu_breadcrumb_alter().
 *
 * Fix breadcrumbs for dashboard paths.
 */
function drop_jobs_candidate_menu_breadcrumb_alter(&$active_trail, $item) {
  $dashboard_paths = array(
    'dashboard/candidate/resume',
    'dashboard/candidate/favorites',
    'dashboard/candidate/preferences',
  );

  drupal_alter('drop_jobs_candidate_dashboard_paths', $dashboard_paths);

  $dashboard_trail = array(
    array(
      'title' => t('Home'),
      'href' => '<front>',
      'localized_options' => array(),
    ),
    array(
      'title' => t('Candidate dashboard'),
      'href' => 'dashboard/candidate',
      'localized_options' => array(),
    ),
  );

  if (in_array($item['path'], $dashboard_paths)) {
    $active_trail = $dashboard_trail;
  }
  else if ($item['path'] === 'resume/%/edit') {
    $dashboard_trail[] = array(
      'title' => t('My résumé'),
      'href' => 'dashboard/candidate/resume',
      'localized_options' => array(),
    );
    $active_trail = $dashboard_trail;
  }
}

/**
 * Implements hook_field_collection_item_view().
 *
 * Add a default photo for resumes. This is non-intrusive, in that it will
 * only take effect if there's no default photo configured for this field.
 * It's a last-ditch fallback and can easily be overriden by another
 * hook_field_collection_item_view() or a hook_field_collection_item_view_alter()
 * if so-inclined.
 */
//function drop_jobs_candidate_field_collection_item_view($field_collection_item, $view_mode, $langcode) {
//  if ($field_collection_item->field_name === 'field_resume_personal') {
//    if (empty($field_collection_item->field_resume_photo)) {
//
//    }
//  }
//}
