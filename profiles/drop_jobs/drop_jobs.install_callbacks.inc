<?php
/**
 * @file
 * Contains Batch API callbacks used during installation.
 */

/**
 * BatchAPI callback.
 *
 * Enables a single module.
 *
 * @see drop_jobs_install_additional_modules()
 */
function _drop_jobs_enable_module($module, $module_name, &$context) {
  module_enable(array($module), FALSE);
  $context['message'] = st('Installed %module module.', array('%module' => $module_name));
}

/**
 * BatchAPI callback.
 *
 * Flushes all caches.
 *
 * @see drop_jobs_cleanup()
 */
function _drop_jobs_flush_caches($operation, &$context) {
  $context['message'] = t('@operation', array('@operation' => $operation));
  drupal_flush_all_caches();
}

/**
 * Batch API callback.
 *
 * Reverts certain Drop Jobs features to fix a problem where they're overriden
 * immediately after installation and things don't work as expected.
 *
 * @see drop_jobs_cleanup()
 */
function _drop_jobs_revert_features($operation, &$context) {
  $context['message'] = t('@operation', array('@operation' => $operation));

  $items = array(
    'drop_jobs_core' => array('user_permission'),
    'drop_jobs_candidate' => array('user_permission'),
    'drop_jobs_search' => array('user_permission'),
  );

  if (module_exists('drop_jobs_application')) {
    $items['drop_jobs_application'] = array('menu_links', 'user_permission');
  }

  if (module_exists('drop_jobs_dev')) {
    $items['drop_jobs_dev'] = array('variable');
  }

  if (module_exists('drop_jobs_report')) {
    $items['drop_jobs_report'] = array('menu_links');
  }

  if (module_exists('drop_jobs_subscription')) {
    $items['drop_jobs_subscription'] = array('menu_links');
  }

  features_revert($items);
}

/**
 * BatchAPI callback.
 *
 * Imports a migration.
 *
 * @see drop_jobs_import_content()
 */
function _drop_jobs_import($operation, $type, &$context) {
  $context['message'] = t('@operation', array('@operation' => $type));
  $migration =  Migration::getInstance($operation);
  $migration->processImport();
}

/**
 * BatchAPI callback.
 *
 * Rolls back a migration.
 *
 * @see drop_jobs_core_demo_rollback()
 */
function _drop_jobs_rollback($operation, $type, &$context) {
  $context['message'] = t('@operation', array('@operation' => $type));
  $migration =  Migration::getInstance($operation);
  $migration->processRollback();
}

/**
 * BatchAPI callback.
 *
 * Sets labels for profiles.
 *
 * @see drop_jobs_cleanup()
 */
function _drop_jobs_profile_labels($pid, $operation, &$context) {
  $context['message'] = t('@operation', array('@operation' => $operation));
  static $event;

  // We can't manually call rules_invoke_event_by_args() because maintanance
  // mode is active during installation. Therefore we just manually grab
  // the RulesEventSet object from Rules' cache and execute it ourselves.
  if ($profile = profile2_load($pid)) {
    if (!isset($event)) {
      $event = rules_get_cache('event_profile2_update');
    }

    if ($event instanceof RulesEventSet) {
      $args = array('profile2' => $profile);
      $event->executeByArgs($args);
    }
  }
}

/**
 * BatchAPI callback.
 *
 * Sets titles for blocks.
 *
 * @see drop_jobs_cleanup()
 */
function _drop_jobs_block_titles($module, $delta, $title, $operation, &$context) {
  $context['message'] = t('@operation', array('@operation' => $operation));

  db_update('block')
    ->fields(array('title' => $title))
    ->condition('module', $module, '=')
    ->condition('theme', 'bartik', '=')
    ->condition('delta', $delta, '=')
    ->execute();
}

/**
 * Batch API finished callback.
 *
 * @see drop_jobs_import_content()
 * @see drop_jobs_core_demo_import()
 */
function drop_jobs_import_content_finished($success, $results) {
  // Remove messages generated by Migrate.
  drupal_get_messages(NULL, TRUE);

  if ($success) {
    drupal_set_message(t('Finished importing demo content.'), 'status', FALSE);
  }
  else {
    drupal_set_message(t('Error importing demo content.'), 'error', FALSE);
  }
}

/**
 * Batch API finished callback.
 *
 * @see drop_jobs_import_terms()
 */
function drop_jobs_import_terms_finished($success, $results) {
  // Remove messages generated by Migrate.
  drupal_get_messages(NULL, TRUE);

  if ($success) {
    drupal_set_message(t('Finished importing taxonomy terms.'), 'status', FALSE);
  }
  else {
    drupal_set_message(t('Error importing taxonomy terms.'), 'error', FALSE);
  }
}

/**
 * Batch API finished callback.
 *
 * @see drop_jobs_core_demo_rollback()
 */
function drop_jobs_rollback_content_finished($success, $results) {
  // Remove messages generated by Migrate.
  drupal_get_messages(NULL, TRUE);

  if ($success) {
    drupal_set_message(t('Finished removing demo content.'), 'status', FALSE);
  }
  else {
    drupal_set_message(t('Error removing demo content.'), 'error', FALSE);
  }
}


/**
 * Batch API finished callback.
 *
 * @see drop_jobs_cleanup()
 */
function drop_jobs_cleanup_finished($success, $results) {
  // Remove any lingering messages.
  drupal_get_messages(NULL, TRUE);

  if ($success) {
    drupal_set_message(t('Post-install cleanup successful. Your site is now ready!'), 'status', FALSE);
  }
  else {
    drupal_set_message(t('Error perfoming post-install cleanup.'), 'error', FALSE);
  }
}